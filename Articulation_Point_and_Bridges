#include <bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define pb push_back

#define _ ios_base::sync_with_stdio(0);
#define fastt ios_base::sync_with_stdio(false); cin.tie(0);
#define prec  cout<<fixed<<setprecision(16);
//# define sess cout<<endl;

#define file freopen("000.txt","r",stdin);
#define balsal cout<<"dhukse"<<endl;

#define pi acos(-1.0)
#define PI 3.141592653589793
#define INF 1e9

#define si(n)                        scanf("%d",&n)
#define sii(a,b)                    scanf("%d%d",&a,&b)
#define siii(a,b,c)                scanf("%d%d%d",&a,&b,&c)
#define sl(a)                        scanf("%lld",&a)
#define sll(a,b)                    scanf("%lld%lld",&a,&b)
#define slll(a,b,c)                scanf("%lld%lld%lld",&a,&b,&c)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

#define it_multiset  std::multiset<int>::iterator it;
#define it_mii std::map<int, int>::iterator it;

#define MOD 1000000007
#define mod  1000000007
//#define con continue;
//#define ret return
#define mx_value 1e19


int sett( int N,int pos)
{
    return N=N | (1<<pos);
}
int reset(int N,int pos)
{
    return N= N & ~(1<<pos);
}
bool check(int N,int pos)
{
    return (bool)(N & (1<<pos));
}

void update(long long &x, long long val)
{
    x = x+val;
    if(x>mod)x-=mod;
}

void fast()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL), cout.tie(NULL);
}

int moves[4][2] = { {1,0} , {0,1} , {-1,0}, {0,-1} };

typedef long long int ll;
typedef  float flt;
typedef double dbl;
typedef vector<int >  vi;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;
typedef map<int , int> mii;

//bridge gulake bad dile baki component gula ekekta cycle hoy
// articulation point gulake bad dile koto gula componnt hoy?
//jotobar articulation point er jonno low[next]>=low[node] call hobe
//totobar count_children[node]++ korbo
//root er jonno ja ase tai ans hobe
//root chara onnogular jonno count_children[node]+1 and hobe

#define N 10010

vi graph[N];

int low[N];
int num[N];
int counter = 1;
int par[N];

void reset(int n)
{
    for(int i=0; i<=n; i++)
    {
        low[i] = 0;
        num[i]=0;
        counter =1 ;
        par[i]=i;
        graph[i].clear();
    }
}

void dfs(int node)
{
    low[node] = num[node] = counter++;

    int loop = graph[node].size();

    for(int i=0;i<loop;i++)
    {

        int next = graph[node][i];

        if(!num[next])
        {
            par[next] = node;
            dfs(next);

            if(low[next]>=low[node])
            {
                //node ekta articulation point
            }
            if(low[next]>low[node])
            {
                // node-next ekta bridge
            }

            low[node] = min(low[node] , low[next]);
        }
        else if(par[node]!=next)  //it is nor a direct cycle
        {
             low[node] = min(low[node] , num[next]);
        }


    }
}

int main()
{
#ifndef ONLINE_JUDGE
    file;
#endif // ONLINE_JUDGE


    int t;
    si(t);
    int cs   = 1;
    while(t--)
    {

        int n,m;
        sii(n,m);

        reset(n);

        for(int i=0; i<m; i++)
        {
            int p,q;
            sii(p,q);
            graph[p].push_back(q);
            graph[q].push_back(p);
        }

        dfs(0);
    }





    return 0;
}

