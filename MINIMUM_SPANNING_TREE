#include <bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define pb push_back

#define _ ios_base::sync_with_stdio(0);
#define fastt ios_base::sync_with_stdio(false); cin.tie(0);
#define prec  cout<<fixed<<setprecision(16);
//# define sess cout<<endl;

#define file freopen("000.txt","r",stdin);
#define balsal cout<<"dhukse"<<endl;

#define pi acos(-1.0)
#define PI 3.141592653589793
#define INF 1e9

#define si(n)                        scanf("%d",&n)
#define sii(a,b)                    scanf("%d%d",&a,&b)
#define siii(a,b,c)                scanf("%d%d%d",&a,&b,&c)
#define sl(a)                        scanf("%lld",&a)
#define sll(a,b)                    scanf("%lld%lld",&a,&b)
#define slll(a,b,c)                scanf("%lld%lld%lld",&a,&b,&c)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

#define it_multiset  std::multiset<int>::iterator it;
#define it_mii std::map<int, int>::iterator it;

#define MOD 1000000007
#define mod  1000000007
//#define con continue;
//#define ret return
#define mx_value 1e19


int sett( int N,int pos)
{
    return N=N | (1<<pos);
}
int reset(int N,int pos)
{
    return N= N & ~(1<<pos);
}
bool check(int N,int pos)
{
    return (bool)(N & (1<<pos));
}

void update(long long &x, long long val)
{
    x = x+val;
    if(x>mod)x-=mod;
}

void fast()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL), cout.tie(NULL);
}

int moves[4][2] = { {1,0} , {0,1} , {-1,0}, {0,-1} };

typedef long long int ll;
typedef  float flt;
typedef double dbl;
typedef vector<int >  vi;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;
typedef map<int , int> mii;


#define edge pair< int, int >
#define N 100100

// ( w (u, v) ) format
vector< pair< int, pii > > graph, mst;

int parent[N], total=0, n, m;

int findset(int x)
{
    if(x != parent[x])
        parent[x] = findset(parent[x]);
    return parent[x];
}

void kruskal()
{
    int i, parent_u, parent_v;
    sort(graph.begin(), graph.end()); // increasing weight
    total = 0;
    for(i=0; i<m; i++)
    {
        parent_u = findset(graph[i].second.first);
        parent_v = findset(graph[i].second.second);
        if(parent_u != parent_v)
        {
            mst.push_back(graph[i]); // add to tree
            total += graph[i].first; // add edge cost
            parent[parent_u] = parent[parent_v]; // link
        }
    }
}

void reset()
{
    graph.clear();
    for(int i=0; i<=100100; i++) parent[i] = i;
    total = 0;
}

void print()
{
    int sz = mst.size();
    for(int i=0; i<sz; i++)
    {
        printf("( %d", mst[i].second.first);
        printf(", %d )", mst[i].second.second);
        printf(": %d\n", mst[i].first);
    }
    printf("Minimum cost: %d\n", total);
}

void take_input_of_graph()
{
    int u,v,w;
    for(int i=0; i<m; i++)
    {
        scanf("%d %d %d", &u, &v, &w);
        cout<<u<<" "<<v<<" "<<w<<endl;
        graph.push_back(pair< int, pii >(w, pii (u, v)));
    }
}


int main()
{
    file;
    int i, u, v, w;
    scanf("%d %d", &n,&m);
    reset();
    take_input_of_graph();
    kruskal();
    print();
    return 0;
}

