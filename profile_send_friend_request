package com.example.mohammadfaisal.chitchat;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.support.annotation.NonNull;
import android.support.design.widget.CollapsingToolbarLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.firebase.ui.database.FirebaseRecyclerAdapter;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ServerValue;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;
import com.squareup.picasso.Callback;
import com.squareup.picasso.NetworkPolicy;
import com.squareup.picasso.Picasso;
import com.theartofdev.edmodo.cropper.CropImage;
import com.theartofdev.edmodo.cropper.CropImageView;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;

import de.hdodenhof.circleimageview.CircleImageView;
import id.zelory.compressor.Compressor;

public class ProfileActivity extends AppCompatActivity {


    //widgets
    private TextView mProfileName , mProfileStatus;
    private FloatingActionButton mProfileEditProfile , mProfileSendMessage;
    private ImageView mProfileImage;
    private RecyclerView mUsersList;
    private Toolbar toolbar;
    private CollapsingToolbarLayout boroToolbar;

    //toolbar
    private Toolbar mToolbar;
    private ProgressDialog mProgress;
    ProgressDialog mProgressDialog;

    //variables
    private int mCurrentState;
    private String mUserID;
    private String mCurrentUserID;


    //firebase
    private FirebaseDatabase mDatabase;
    private DatabaseReference mDatabaseReference;
    private DatabaseReference mFriendRequestReference;
    private DatabaseReference mFriendsReference;
    private DatabaseReference mNotificationReference;
    private DatabaseReference mRootReference;
    private DatabaseReference mProfilePostsReference;
    private Query mProfilePostsQuery;
    private FirebaseUser mUser;
    private StorageReference mStorageReference,mStorage;



    @Override
    protected void onCreate(Bundle savedInstanceState) {


        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_profile);



        //recycler view
        mUsersList = findViewById(R.id.profile_recycler_view);
        mUsersList.setHasFixedSize(true);
        mUsersList.setLayoutManager(new LinearLayoutManager(this));


        //firebase
        mUser = FirebaseAuth.getInstance().getCurrentUser();
        mCurrentUserID = mUser.getUid();  //je app e login kore ache
        mUserID = getIntent().getStringExtra("userID"); //jar profile e amra dhuksi
        mDatabaseReference = FirebaseDatabase.getInstance().getReference().child("users").child(mUserID);
        mFriendRequestReference = FirebaseDatabase.getInstance().getReference().child("friend_request");
        mFriendsReference = FirebaseDatabase.getInstance().getReference().child("friends");
        mNotificationReference = FirebaseDatabase.getInstance().getReference().child("notifications");
        mRootReference = FirebaseDatabase.getInstance().getReference();
        mProfilePostsReference = FirebaseDatabase.getInstance().getReference().child("posts");
        mProfilePostsQuery = mProfilePostsReference.orderByChild("uid").equalTo(mCurrentUserID);
        mStorage = FirebaseStorage.getInstance().getReference();


        //Setting toolbar
        Toolbar toolbar = findViewById(R.id.profile_toolbar);
        setSupportActionBar(toolbar);

        if(getSupportActionBar()!=null){
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowHomeEnabled(true);
        }





        //widgets
        mProfileEditProfile = findViewById(R.id.profile_edit_profile);
        mProfileSendMessage = findViewById(R.id.profile_send_message);

        mProfileSendMessage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent chatIntent  = new Intent(ProfileActivity.this , ChatActivity.class);
                chatIntent.putExtra("userID" , mUserID );
                startActivity(chatIntent);
            }
        });
        mProfileEditProfile.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //using the library of crop image
                CropImage.activity()
                        .setGuidelines(CropImageView.Guidelines.ON)
                        .setAspectRatio(1,1)
                        .start(ProfileActivity.this);
            }
        });
        if(mUserID.equals(mCurrentUserID)){
            mProfileSendMessage.setVisibility(View.GONE);
            mProfileEditProfile.setVisibility(View.VISIBLE);
        }
        else{
            mProfileEditProfile.setVisibility(View.GONE);
            mProfileSendMessage.setVisibility(View.VISIBLE);
        }

        //mStorageReference = FirebaseStorage.getInstance().getReference();

/*
        //widgets
        //--mProfileName = findViewById(R.id.profile_name);
        //--mProfileStatus = findViewById(R.id.profile_user_status);
        mProfileImage = findViewById(R.id.profile_image);
        mProfileSendRequest = findViewById(R.id.profile_send_request);
       //-- mProfileCancelRequest = findViewById(R.id.profile_cancel_request);

        //proressDialog
        mProgressDialog = new ProgressDialog(this);
        mProgressDialog.setMessage("please wait");
        mProgressDialog.setCanceledOnTouchOutside(false);

        //recyclerVIew



        //variables
        mCurrentState = 0;

        //if user enters into his own account


        mProfileCancelRequest.setVisibility(View.GONE);


        //0 --> not friend
        //1 --> friend request sent
        //2 --> friend request receieved
        //3 --> already friends
        */



        //  TO ENABLE OFFLINE PERFORMANCE
        mDatabaseReference.keepSynced(true);
        mDatabaseReference.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                //mProgressDialog.show();
                String name = dataSnapshot.child("name").getValue().toString();
                boroToolbar.setTitle(name);
                final String profile_image_url = dataSnapshot.child("image").getValue().toString();

                // --------- LOAD IMAGE WITH PICASSO AND OFFLINE IS ALSO ENABLED
                Picasso.with(ProfileActivity.this).load(profile_image_url).networkPolicy(NetworkPolicy.OFFLINE)
                        .placeholder(R.drawable.blank_profile).into(mProfileImage, new Callback() {
                    @Override
                    public void onSuccess(){
                        //do nothing if an image is found offline
                    }
                    @Override
                    public void onError(){
                        Picasso.with(ProfileActivity.this).load(profile_image_url).placeholder(R.drawable.blank_profile).into(mProfileImage);
                    }
                });

                /*//সিঙ্গেল ভ্যালু ইভেন্ট লিসেনার কেবল মাত্র একবার ই কাজ করে
                mFriendRequestReference.child(mCurrentUserID).addListenerForSingleValueEvent(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot dataSnapshot) {
                        if(dataSnapshot.hasChild(mUserID)){
                            String req_type = dataSnapshot.child(mUserID).child("request_type").getValue().toString();
                            if(req_type.equals("sent")){
                                mCurrentState = 1;
                                mProfileSendRequest.setText("Cancel request");
                            }
                            else if(req_type.equals("receieved")){
                                mCurrentState = 2;
                                mProfileSendRequest.setText("Accpet request");
                                mProfileCancelRequest.setVisibility(View.VISIBLE);
                            }
                        }
                    }
                    @Override
                    public void onCancelled(DatabaseError databaseError) {
                    }
                });
                mProgressDialog.dismiss();*/
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
/*
        //আমরা এখানে দেখব তারা অলরেডি ফ্রেন্ড নাকি
        //যদি হয় তাহলে আনফ্রেন্ড বাটন টা শো করএ দিতে হবে
        mFriendsReference.child(mCurrentUserID).addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if(dataSnapshot.hasChild(mUserID)){
                    mCurrentState = 3;
                    mProfileSendRequest.setText("Unfriend");
                }
            }
            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });


        mProfileSendRequest.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //---------- NOT FRIENDS STATE
                //এরা এখনো ফ্রেন্ড না তাই আমি এখন ফ্রেন্ড রিকুয়েস্ট পাঠাতে পারব
                if(mCurrentState==0){
                    mProfileSendRequest.setEnabled(false);

                    //notification data add korar jonno amra ekhane ekta notun push key toiri korchi ja normal push() function e create hoy
                    //er pore notificaion data te notificaiotn er jonno jesob data rakha lagbe sehula rekhe dilam
                    mNotificationReference = FirebaseDatabase.getInstance().getReference().child("notifications").child(mUserID).push();
                    String pushKey = mNotificationReference.getKey();
                    HashMap<String , String> notificationData = new HashMap<>();
                    notificationData.put("from" , mCurrentUserID);
                    notificationData.put("type" , "friend_request");


                    //this is an alternative way to run database query which will make our code more clean and faster
                    Map requestMap = new HashMap();
                    requestMap.put("friend_request"+"/"+mCurrentUserID + "/" + mUserID + "/request_type" , "sent");
                    requestMap.put("friend_request"+"/"+mUserID + "/" + mCurrentUserID + "/request_type" , "receieved");
                    requestMap.put("notifications"+"/"+mUserID + "/"+ pushKey , notificationData);
                    mRootReference.updateChildren(requestMap, new DatabaseReference.CompletionListener() {
                        @Override
                        public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {

                            if(databaseError!=null) {
                                Toast.makeText(ProfileActivity.this, "There was some error in sending request !!", Toast.LENGTH_SHORT).show();
                            }
                            else {
                                mCurrentState = 1;
                                mProfileSendRequest.setText("cancel friend request");

                            }
                        }
                    });
                    mProfileSendRequest.setEnabled(true);

                }
                //------------  REQUEST SENT STATE
                //আমাকে রিকুয়েস্ট দিসে একজন এখন আমি এইটা ক্যানসেল করতে চাই তাই friend_request section theke remove kore dilam
                if(mCurrentState==1){



                    Map requestSentMap = new HashMap();
                    requestSentMap.put("friend_request"+"/"+mCurrentUserID + "/" + mUserID , null);
                    requestSentMap.put("friend_request"+"/"+mUserID + "/" + mCurrentUserID , null);
                    mRootReference.updateChildren(requestSentMap, new DatabaseReference.CompletionListener() {
                        @Override
                        public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
                            if(databaseError==null){ //success
                                mProfileSendRequest.setText("Send Friend Request");
                                mCurrentState = 0;
                                Toast.makeText(ProfileActivity.this, "friend request cancelled", Toast.LENGTH_SHORT).show();
                            }
                            else{
                                String error = databaseError.getMessage();
                                Toast.makeText(ProfileActivity.this, error, Toast.LENGTH_SHORT).show();
                            }
                        }
                    });
                }
                //------- REQUEST RECEIEVED STATE

                //যদি কেউ রিকুয়েস্ট এক্সেপ্ট করে তাহলে প্রথমে ফ্রেন্ডস সেকশন এ গিয়ে তাদের পরশপরের আইডি কে একে অপরের ফ্রেন্ড করে দিব
                //এর পরের ধাপে যেহেতু তাদের এই ডাটা ফ্রেন্ড্রিকুয়েস্ট সেকশন এও আছে তাই ঐটা ডিলেট করা লাগবে

                if(mCurrentState==2){
                    final String currentDate = DateFormat.getDateInstance().format(new Date());


                    //4 ta query eksathe chalaitesi
                    Map friendMakingMap = new HashMap();
                    friendMakingMap.put("friends"+"/"+mCurrentUserID + "/" + mUserID +"/date", currentDate);
                    friendMakingMap.put("friends"+"/"+mUserID + "/" + mCurrentUserID +"/date", currentDate);
                    friendMakingMap.put("friend_request"+"/"+ mCurrentUserID+"/"+mUserID , null);
                    friendMakingMap.put("friend_request"+"/"+ mUserID+"/"+mCurrentUserID , null);


                    mRootReference.updateChildren(friendMakingMap, new DatabaseReference.CompletionListener() {
                        @Override
                        public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
                            if(databaseError!=null){

                            }
                            else{ //success

                                mProfileSendRequest.setText("unfriend");
                                mProfileSendRequest.setEnabled(true);
                                mCurrentState = 3; //they are now become friends
                            }
                        }
                    });
                }
                // ------------ ALREADY FRIENDS BUT NOW I WANT TO UNFRIEND HIM
                //friends ডাটাবেজ থেকে এদের এন্ট্রি গুলা রিমুভ করে দিতেসি
                if(mCurrentState==3){
                    mFriendsReference.child(mCurrentUserID).child(mUserID).removeValue().addOnCompleteListener(new OnCompleteListener<Void>() {
                        @Override
                        public void onComplete(@NonNull Task<Void> task) {
                            if(task.isSuccessful()){
                                mFriendsReference.child(mUserID).child(mCurrentUserID).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                    @Override
                                    public void onSuccess(Void aVoid) {
                                        mCurrentState = 0;
                                        mProfileSendRequest.setText("Send friend Request");
                                        Toast.makeText(ProfileActivity.this, "Successfully unfriended !", Toast.LENGTH_SHORT).show();
                                    }
                                });
                            }
                        }
                    });
                }
            }
        });


        *//*mProfileCancelRequest.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mFriendRequestReference.child(mCurrentUserID).child(mUserID).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        mFriendRequestReference.child(mUserID).child(mCurrentUserID).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                            @Override
                            public void onSuccess(Void aVoid) {
                                mProfileSendRequest.setText("unfriend");
                                mProfileSendRequest.setEnabled(true);
                                mProfileCancelRequest.setVisibility(View.GONE);
                                mCurrentState = 0; //they are not friends
                                Toast.makeText(ProfileActivity.this, "friend request cancelled", Toast.LENGTH_SHORT).show();
                            }
                        });
                    }
                });
            }
        });*/
    }


    @Override
    protected void onStart() {
        super.onStart();
        mDatabaseReference.child("online").setValue(true);//offline or online

        FirebaseRecyclerAdapter<Posts ,ProfileActivity.ProfilePostViewHolder> firebaseRecyclerAdapter = new FirebaseRecyclerAdapter<Posts, ProfileActivity.ProfilePostViewHolder>(
                Posts.class,
                R.layout.post_single,
                ProfileActivity.ProfilePostViewHolder.class,
                mProfilePostsQuery
        ) {
            @Override
            protected void populateViewHolder(final ProfileActivity.ProfilePostViewHolder viewHolder, Posts model, final int position) {


                viewHolder.setTimeDate(model.getTime_and_date());
                if (model.getPost_image_url() != null) {
                    viewHolder.setPostImage(model.getPost_image_url(), getApplicationContext());
                }
                if (model.getCaption() != null) {
                    viewHolder.setCaption(model.getCaption());
                }

                //to populate users details
                final String list_user_id = model.getUid();
                mDatabaseReference.addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot dataSnapshot) {
                        String thumb_image_url = dataSnapshot.child("thumb_image").getValue().toString();
                        String name = dataSnapshot.child("name").getValue().toString();

                        viewHolder.setName(name);
                        viewHolder.setProfileImage(thumb_image_url, getApplicationContext()); //Image(thumb_image_url,getContext());
                    }
                    @Override
                    public void onCancelled(DatabaseError databaseError) {
                    }
                });
            }
        };
        mUsersList.setAdapter(firebaseRecyclerAdapter);
    };


    public static  class ProfilePostViewHolder extends RecyclerView.ViewHolder{
        View mVIew;

        public ProfilePostViewHolder(View itemView) {
            super(itemView);
            mVIew =itemView;
        }
        public void setName(String name){
            TextView mUserNameView = mVIew.findViewById(R.id.txt_name);
            mUserNameView.setText(name);
        }
        public void setTimeDate(String time_date){
            TextView mUsersStatusView = mVIew.findViewById(R.id.txt_time_date);
            mUsersStatusView.setText(time_date);
        }
        public void setCaption(String caption){
            TextView mPostCaption = mVIew.findViewById(R.id.post_caption);
            mPostCaption.setText(caption);
        }
        private void setProfileImage(String ImageUrl , Context mContext){
            CircleImageView single_image = mVIew.findViewById(R.id.post_user_single_imagee);
            if(ImageUrl.equals("")){

            }
            else{
                Picasso.with(mContext).load(ImageUrl).placeholder(R.drawable.blank_profile).into(single_image);
            }
        }
        private void setPostImage(String ImageUrl , Context mContext){
            ImageView single_image = mVIew.findViewById(R.id.img_post);
            if(ImageUrl.equals("")){

            }
            else{
                Picasso.with(mContext).load(ImageUrl).placeholder(R.drawable.blank_profile).into(single_image);
            }
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        mDatabaseReference.child("online").setValue(ServerValue.TIMESTAMP);
    }


    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
            CropImage.ActivityResult result = CropImage.getActivityResult(data);

            //showing the progress dialog
            mProgress = new ProgressDialog(ProfileActivity.this);
            mProgress.setTitle("Uploading Image...");
            mProgress.setMessage("please wait while we upload your image");
            mProgress.show();


            if (resultCode == RESULT_OK) {
                Uri imagetUri = result.getUri();

                //compressing image
                Bitmap thumb_bitmap = null;
                File thumb_file = new File(imagetUri.getPath());
                try {
                    thumb_bitmap = new Compressor(this)
                            .setMaxWidth(200)
                            .setMaxHeight(200)
                            .setQuality(60)
                            .compressToBitmap(thumb_file);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                thumb_bitmap.compress(Bitmap.CompressFormat.JPEG, 60, baos);
                final byte[] thumb_byte = baos.toByteArray();

                //uplaoading real to firebase storage
                StorageReference imageFilePath = mStorage.child("users").child(mUserID).child("Profile").child("profile_images").child(mUserID+".jpg");
                final StorageReference thumbFilePath = mStorage.child("users").child(mUserID).child("Profile").child("thumb_images").child(mUserID+".jpg");

                //প্রথমে মেইন ইমেজ টা আপলোড করবে এবং এটার ডাউনলোড URL টা নিবে । তারপরে থাম্বনিল ইমেজ টা আপলোড করবে এবং এইটার ডাউনলোড URL টা নিবে
                //সর্বশেষে এই দুইটা URl firebase Databse এ আপলোড করে দিবে

                imageFilePath.putFile(imagetUri)
                        .addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                            @Override
                            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                                // Get a URL to the uploaded content
                                Uri downloadUrlImage = taskSnapshot.getDownloadUrl();
                                final String downLoadUriStringImage  = downloadUrlImage.toString();


                                //uploading the bitmap image
                                UploadTask uploadThumbTask = thumbFilePath.putBytes(thumb_byte);

                                uploadThumbTask.addOnFailureListener(new OnFailureListener() {
                                    @Override
                                    public void onFailure(@NonNull Exception exception) {
                                        // Handle unsuccessful uploads
                                        Toast.makeText(ProfileActivity.this, "Some Error occured while uplaoding the image", Toast.LENGTH_SHORT).show();
                                        mProgress.dismiss();
                                    }
                                }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                                    @Override
                                    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                                        // taskSnapshot.getMetadata() contains file metadata such as size, content-type, and download URL.
                                        Uri downloadUrlThumb = taskSnapshot.getDownloadUrl();
                                        String  downLoadUriStringThumb  = downloadUrlThumb.toString();


                                        //create a new hash map to put the file into firebase database
                                        //এইখানে একটা কথা বলা ভালো যদি আমরা এইখানে HashMap use করি তাইলে কাজ করবেনা কারন সেই ক্ষেত্রে ফায়ারবেজ ডাটা আপডেট করবেনা
                                        //এইখানে Map ইউজ করতে হবে আর setValue() function এর বদলে updateChildren() ব্যাবহার করা লাগবে
                                        Map updateHashmap = new HashMap<>();
                                        updateHashmap.put("image"  , downLoadUriStringImage);
                                        updateHashmap.put("thumb_image" , downLoadUriStringThumb);


                                        mDatabaseReference.updateChildren(updateHashmap).addOnCompleteListener(new OnCompleteListener<Void>() {
                                            @Override
                                            public void onComplete(@NonNull Task<Void> task) {
                                                if(task.isSuccessful()){
                                                    mProgress.dismiss();
                                                    Toast.makeText(ProfileActivity.this, "uploading is successful !", Toast.LENGTH_SHORT).show();
                                                }
                                                else{
                                                    Toast.makeText(ProfileActivity.this, "Some Error Occured!", Toast.LENGTH_SHORT).show();
                                                    mProgress.dismiss();
                                                }
                                            }
                                        });
                                    }
                                });
                            }
                        })
                        .addOnFailureListener(new OnFailureListener() {
                            @Override
                            public void onFailure(@NonNull Exception exception) {
                                mProgress.dismiss();
                            }
                        });
            } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {
                Exception error = result.getError();
            }
        }
    }



}
